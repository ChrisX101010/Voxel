var thisStack = [];
var nextThis = null;
var superStack = [];

function instantiate(object, constructorArgs) {
    var instance = {};
    var prototypes = syscall Op(instance);

    syscall Lu(object, prototypes);

    var constructorFunction = instance.constructor;

    if (syscall T(constructorFunction) != "@" && syscall T(constructorFunction) != "C") {
        return instance;
    }

    var result = instance.constructor(...constructorArgs);

    if (result != null) {
        return result;
    }

    return instance;
}

function callSuperMethod(property, args) {
    var object;

    if (syscall Ll(superStack) == 0) {
        var prototypes = syscall Op(this);

        object = prototypes[0];
    } else {
        object = superStack[-1];
    }

    var inheritedPrototypes = syscall Op(object);

    if (syscall T(inheritedPrototypes) != "L") {
        return null;
    }

    for (var i = syscall Ll(inheritedPrototypes) - 1; i >= 0; i = i - 1) {
        var methodFunction = inheritedPrototypes[i][property];

        if (syscall T(methodFunction) == "@" || syscall T(methodFunction) == "C") {
            syscall Lu(inheritedPrototypes[i], superStack);

            var result = methodFunction(...args);

            syscall Lp(superStack);

            return result;
        }
    }

    return null;
}

function callSuperConstructors(constructorArgs) {
    var object;

    if (syscall Ll(superStack) == 0) {
        var prototypes = syscall Op(this);

        object = prototypes[0];
    } else {
        object = superStack[-1];
    }

    var inheritedPrototypes = syscall Op(object);

    if (syscall T(inheritedPrototypes) != "L") {
        return null;
    }

    for (var i = 0; i < syscall Ll(inheritedPrototypes); i = i + 1) {
        var constructorFunction = inheritedPrototypes[i][#prop(constructor)];

        if (syscall T(constructorFunction) == "@" || syscall T(constructorFunction) == "C") {
            syscall Lu(inheritedPrototypes[i], superStack);

            constructorFunction(...constructorArgs);

            syscall Lp(superStack);
        }
    }
}

function getProperty(thing, property) {
    nextThis = thing;

    if (syscall T(thing) == "L") {
        if (#usedprop(length) && property == #prop(length)) {
            return syscall Ll(thing);
        }

        if (#usedprop(push) && property == #prop(push)) {
            return function(value) {
                return syscall Lu(value, thing);
            };
        }

        if (#usedprop(pop) && property == #prop(pop)) {
            return function() {
                return syscall Lp(thing);
            };
        }

        if (#usedprop(unshift) && property == #prop(unshift)) {
            return function(value) {
                return syscall Li(value, thing, 0);
            };
        }

        if (#usedprop(shift) && property == #prop(shift)) {
            return function() {
                if (syscall Ll(thing) == 0) {
                    return null;
                }

                var value = thing[0];

                syscall Lr(thing, 0);

                return value;
            };
        }

        if (#usedprop(insert) && property == #prop(insert)) {
            return function(index, value) {
                return syscall Li(value, thing, index);
            };
        }

        if (#usedprop(removeAt) && property == #prop(removeAt)) {
            return function(index) {
                if (index >= syscall Ll(thing)) {
                    return null;
                }

                var value = thing[index];

                syscall Lr(thing, index);

                return value;
            };
        }

        if (#usedprop(indexOf) && property == #prop(indexOf)) {
            return function(value) {
                var length = syscall Ll(thing);

                for (var i = 0; i < length; i = i + 1) {
                    if (thing[i] == value) {
                        return i;
                    }
                }

                return -1;
            };
        }

        if (#usedprop(contains) && property == #prop(contains)) {
            return function(value) {
                var length = syscall Ll(thing);

                for (var i = 0; i < length; i = i + 1) {
                    if (thing[i] == value) {
                        return true;
                    }
                }

                return false;
            };
        }

        if (#usedprop(remove) && property == #prop(remove)) {
            return function(value) {
                var length = syscall Ll(thing);

                for (var i = 0; i < length; i = i + 1) {
                    if (thing[i] == value) {
                        syscall Lr(thing, i);

                        return true;
                    }
                }

                return false;
            };
        }

        if (#usedprop(forEach) && property == #prop(forEach)) {
            return function(callback) {
                var length = syscall Ll(thing);

                for (var i = 0; i < length; i = i + 1) {
                    callback(thing[i], i);
                }
            };
        }

        if (#usedprop(map) && property == #prop(map)) {
            return function(callback) {
                var length = syscall Ll(thing);
                var result = [];

                for (var i = 0; i < length; i = i + 1) {
                    syscall Lu(callback(thing[i], i), result);
                }

                return result;
            };
        }

        if (#usedprop(filter) && property == #prop(filter)) {
            return function(callback) {
                var length = syscall Ll(thing);
                var result = [];

                for (var i = 0; i < length; i = i + 1) {
                    var item = thing[i];

                    if (callback(item, i)) {
                        syscall Lu(item, result);
                    }
                }

                return result;
            }
        }

        if (#usedprop(reduce) && property == #prop(reduce)) {
            return function(callback, initialValue) {
                var length = syscall Ll(thing);

                for (var i = 0; i < length; i = i + 1) {
                    initialValue = callback(initialValue, thing[i]);
                }

                return initialValue;
            };
        }
    }

    if (syscall T(thing) == "O") {
        var getter = syscall Ogg(thing, property);

        if (getter) {
            return getter();
        }

        var value = syscall Og(thing, property);

        if (#usedprop(length) && property == #prop(length) && value == null) {
            return syscall Ol(thing);
        }

        if (#usedprop(prototypes) && property == #prop(prototypes) && value == null) {
            return syscall Op(thing);
        }

        return value;
    }

    return null;
}

function setProperty(thing, property, value) {
    if (syscall T(thing) == "O") {
        var setter = syscall Ogs(thing, property);

        if (setter) {
            setter(value);

            return value;
        }
    }

    return syscall Ts(value, thing, property);
}

function pushThis() {
    syscall Lu(nextThis, thisStack);
}

function popThis() {
    nextThis = syscall Lp(thisStack);
}

function getThis() {
    return nextThis;
}