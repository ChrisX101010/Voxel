var object = {
    retain key: 123,
    retain nestedObject: {
        retain key1: "value1",
        retain key2: "value2",
        retain anotherNestedObject: {key: "value"}
    },
    retain list: ["a", "b", "c"],
    "quoted key value": true
};

syscall io_out("Define object: ");
syscall io_out(object);
syscall io_out("\n");

syscall io_out("Get value: ");
syscall io_out(object["key"]);
syscall io_out("\n");

syscall io_out("Get value using property accessor: ");
syscall io_out(object.key);
syscall io_out("\n");

syscall io_out("Get value not in object: ");
syscall io_out(object["missing"]);
syscall io_out("\n");

syscall io_out("Get value not in object using proeprty accessor: ");
syscall io_out(object.missing);
syscall io_out("\n");

syscall io_out("Get nested object value: ");
syscall io_out(object["nestedObject"]["key2"]);
syscall io_out("\n");

syscall io_out("Get nested object value using property accessor: ");
syscall io_out(object.nestedObject.key2);
syscall io_out("\n");

object["key"] = 456;

syscall io_out("Set existing property value: ");
syscall io_out(object);
syscall io_out("\n");

object["newKey"] = 789;

syscall io_out("Set new property value: ");
syscall io_out(object);
syscall io_out("\n");

object.key = 321;

syscall io_out("Set existing property value using property accessor: ");
syscall io_out(object);
syscall io_out("\n");

syscall io_out("Get object length: ");
syscall io_out(object.length);
syscall io_out("\n");

syscall io_out("Get object keys: ");
syscall io_out(object.keys);
syscall io_out("\n");

syscall io_out("Get object values: ");
syscall io_out(object.values);
syscall io_out("\n");

{retain key: null, retain value: null};

syscall io_out("Get object pairs: ");
syscall io_out(object.pairs);
syscall io_out("\n");

syscall Or(object, "nestedObject");

syscall io_out("Removing nested object: ");
syscall io_out(object);
syscall io_out("\n");

var mangledObject = {key: 123};

syscall io_out("Get value using property accessor on mangled object: key = ");
syscall io_out(mangledObject.key);
syscall io_out("\n");

mangledObject.key = 456;

syscall io_out("Set value using property accessor on mangled object: key = ");
syscall io_out(mangledObject.key);
syscall io_out("\n");

mangledObject.mangledNestedObject = {
    mangledKey1: "value1",
    mangledKey2: "value2"
};

syscall io_out("Get value of nested object using property accessor on mangled object: mangledNestedObject.mangledKey1 = ");
syscall io_out(mangledObject.mangledNestedObject.mangledKey1);
syscall io_out("\n");

mangledObject.mangledNestedObject.mangledKey3 = "value3";

syscall io_out("Set new value of nested object using property accessor on mangled object: mangledNestedObject.mangledKey3 = ");
syscall io_out(mangledObject.mangledNestedObject.mangledKey3);
syscall io_out("\n");

var a = {key: 123};
var b = {key: 123};

syscall io_out("Object A is equal to object B: ");
syscall io_out(a == b);
syscall io_out("\n");

syscall io_out("Object A is identical to object B: ");
syscall io_out(a === b);
syscall io_out("\n");

syscall io_out("Object A is not equal to object B: ");
syscall io_out(a != b);
syscall io_out("\n");

syscall io_out("Object A is not identical to object B: ");
syscall io_out(a !== b);
syscall io_out("\n");

var values = {"a": 1, "b": 2, "c": 3, "d": 4, "e": 5};

values.forEach(function(value, key) {
    syscall io_out("values[\"");
    syscall io_out(key);
    syscall io_out("\"] = ");
    syscall io_out(value);
    syscall io_out("\n");
});


syscall io_out("Mapping: ");
syscall io_out(values.map(function(value, key) {
    return (value * 3) + key;
}));
syscall io_out("\n");

syscall io_out("Filtering to get odd numbers: ");
syscall io_out(values.filter(function(value) {
    return value % 2 == 1;
}));
syscall io_out("\n");

syscall io_out("Finding the first even number: ");
syscall io_out(values.find(function(value) {
    return value % 2 == 0;
}));
syscall io_out("\n");

syscall io_out("Finding the key of the first even number: ");
syscall io_out(values.findKey(function(value) {
    return value % 2 == 0;
}));
syscall io_out("\n");

syscall io_out("Finding the value 3: ");
syscall io_out(values.find(function(value) {
    return value == 3;
}));
syscall io_out("\n");

syscall io_out("Finding the key of value 3: ");
syscall io_out(values.findKey(function(value) {
    return value == 3;
}));
syscall io_out("\n");

syscall io_out("Reducing to find sum: ");
syscall io_out(values.reduce(function(accumulator, value) {
    return accumulator + value;
}, 0));
syscall io_out("\n");

syscall io_out("Key of 3: ");
syscall io_out(values.keyOf(3));
syscall io_out("\n");